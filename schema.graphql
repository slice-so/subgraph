type Slicer @entity {
  id: ID!
  slicerVersion: BigInt!
  address: Bytes!
  slices: BigInt!
  minimumSlices: BigInt!
  createdAtTimestamp: BigInt!
  releaseTimelock: BigInt!
  transferableTimelock: BigInt!
  isImmutable: Boolean!
  currenciesControlled: Boolean!
  productsControlled: Boolean!
  resliceAllowed: Boolean!
  transferWhileControlledAllowed: Boolean!
  acceptsAllCurrencies: Boolean!
  storeClosed: Boolean!
  protocolFee: BigInt!
  royaltyPercentage: BigInt!
  royaltyReceiver: Payee!
  creator: Payee!
  controller: Payee!
  productsModuleBalance: BigInt!
  productsModuleReleased: BigInt!
  referralFeeStore: BigInt!

  totalOrders: BigInt!
  totalProductsPurchased: BigInt!
  totalEarnedUsd: BigInt!
  releasedUsd: BigInt!
  statsByDay: [SlicerStatsByDay!]! @derivedFrom(field: "slicer")
  statsByWeek: [SlicerStatsByWeek!]! @derivedFrom(field: "slicer")
  statsByMonth: [SlicerStatsByMonth!]! @derivedFrom(field: "slicer")
  statsByYear: [SlicerStatsByYear!]! @derivedFrom(field: "slicer")

  childrenSlicers: [Slicer!]!
  currencies: [CurrencySlicer!]! @derivedFrom(field: "slicer")
  payees: [PayeeSlicer!]! @derivedFrom(field: "slicer")
  products: [Product!]! @derivedFrom(field: "slicer")
  TokenListings: [TokenListing!]! @derivedFrom(field: "slicer")
  purchaseData: [PurchaseData!]! @derivedFrom(field: "slicer")
  slicerOrders: [SlicerOrder!]! @derivedFrom(field: "slicer")
  productTypes: [ProductType!]! @derivedFrom(field: "slicer")
  productTypeHierarchies: [ProductTypeHierarchy!]! @derivedFrom(field: "slicer")
  # TokensReceived: [TokenReceived!]! @derivedFrom(field: "slicer")
}

type SlicerAddress @entity {
  id: ID!
  slicer: Slicer!
}

type SlicerStatsByDay @entity {
  id: ID!
  slicer: Slicer!
  day: BigInt!
  week: SlicerStatsByWeek!
  month: SlicerStatsByMonth!
  year: SlicerStatsByYear!
  totalOrders: BigInt!
  totalProductsPurchased: BigInt!
  totalEarnedUsd: BigInt!
  totalEarnedByCurrency: [CurrencySlicerDay!]! @derivedFrom(field: "slicerDay")
}

type SlicerStatsByWeek @entity {
  id: ID!
  slicer: Slicer!
  days: [SlicerStatsByDay!]! @derivedFrom(field: "week")
  week: BigInt!
  month: SlicerStatsByMonth!
  year: SlicerStatsByYear!
  totalOrders: BigInt!
  totalProductsPurchased: BigInt!
  totalEarnedUsd: BigInt!
  totalEarnedByCurrency: [CurrencySlicerWeek!]!
    @derivedFrom(field: "slicerWeek")
}

type SlicerStatsByMonth @entity {
  id: ID!
  slicer: Slicer!
  days: [SlicerStatsByDay!]! @derivedFrom(field: "month")
  weeks: [SlicerStatsByWeek!]! @derivedFrom(field: "month")
  month: BigInt!
  year: SlicerStatsByYear!
  totalOrders: BigInt!
  totalProductsPurchased: BigInt!
  totalEarnedUsd: BigInt!
  totalEarnedByCurrency: [CurrencySlicerMonth!]!
    @derivedFrom(field: "slicerMonth")
}

type SlicerStatsByYear @entity {
  id: ID!
  slicer: Slicer!
  days: [SlicerStatsByDay!]! @derivedFrom(field: "year")
  weeks: [SlicerStatsByWeek!]! @derivedFrom(field: "year")
  months: [SlicerStatsByMonth!]! @derivedFrom(field: "year")
  year: BigInt!
  totalOrders: BigInt!
  totalProductsPurchased: BigInt!
  totalEarnedUsd: BigInt!
  totalEarnedByCurrency: [CurrencySlicerYear!]!
    @derivedFrom(field: "slicerYear")
}

type CurrencySlicerDay @entity {
  id: ID!
  slicer: Slicer!
  currency: Currency!
  currencySlicer: CurrencySlicer!
  slicerDay: SlicerStatsByDay!
  totalEarned: BigInt!
}

type CurrencySlicerWeek @entity {
  id: ID!
  slicer: Slicer!
  currency: Currency!
  currencySlicer: CurrencySlicer!
  slicerWeek: SlicerStatsByWeek!
  totalEarned: BigInt!
}

type CurrencySlicerMonth @entity {
  id: ID!
  slicer: Slicer!
  currency: Currency!
  currencySlicer: CurrencySlicer!
  slicerMonth: SlicerStatsByMonth!
  totalEarned: BigInt!
}

type CurrencySlicerYear @entity {
  id: ID!
  slicer: Slicer!
  currency: Currency!
  currencySlicer: CurrencySlicer!
  slicerYear: SlicerStatsByYear!
  totalEarned: BigInt!
}

type Payee @entity {
  id: ID!
  created: [Slicer!]! @derivedFrom(field: "creator")
  controlled: [Slicer!]! @derivedFrom(field: "controller")
  royaltyReceived: [Slicer!]! @derivedFrom(field: "royaltyReceiver")
  slicers: [PayeeSlicer!]! @derivedFrom(field: "payee")
  currencies: [PayeeCurrency!]! @derivedFrom(field: "payee")
  purchases: [ProductPurchase!]! @derivedFrom(field: "buyer")
  orders: [Order!]! @derivedFrom(field: "buyer")
  referrals: [Order!]! @derivedFrom(field: "referrer")
}

type Currency @entity {
  id: ID!
  slicers: [CurrencySlicer!]! @derivedFrom(field: "currency")
  payees: [PayeeCurrency!]! @derivedFrom(field: "currency")
  products: [ProductPrices!]! @derivedFrom(field: "currency")
}

type Product @entity {
  id: ID!
  slicer: Slicer!
  isRemoved: Boolean!
  isFree: Boolean!
  isInfinite: Boolean!
  availableUnits: BigInt!
  maxUnitsPerBuyer: BigInt!
  creator: Bytes!
  data: Bytes!
  createdAtTimestamp: BigInt!
  extAddress: Bytes!
  extValue: BigInt!
  extCheckSig: Bytes!
  extExecSig: Bytes!
  extData: Bytes!
  extRelativePrice: Boolean!
  extPreferredToken: Boolean!
  totalPurchases: BigInt!
  referralFeeProduct: BigInt!
  category: ProductCategory!
  productType: ProductType
  subProducts: [Product!]!
  prices: [ProductPrices!]! @derivedFrom(field: "product")
  purchases: [ProductPurchase!]! @derivedFrom(field: "product")
  purchaseData: [PurchaseData!]! @derivedFrom(field: "product")
}

type ProductCategory @entity {
  id: ID!
  name: String!
  parentCategory: ProductCategory
  subCategories: [ProductCategory!]! @derivedFrom(field: "parentCategory")
  products: [Product!]! @derivedFrom(field: "category")

  # Hierarchy relationships
  ancestors: [ProductCategoryHierarchy!]! @derivedFrom(field: "descendant")
  descendants: [ProductCategoryHierarchy!]! @derivedFrom(field: "ancestor")
}

type ProductCategoryHierarchy @entity {
  id: ID! # Set as ${ancestor.id}-${descendant.id}
  ancestor: ProductCategory!
  descendant: ProductCategory!
  depth: BigInt!
}

type ProductType @entity {
  id: ID! # Set as ${slicerId}-${productTypeId}
  name: String!
  parentProductType: ProductType
  slicer: Slicer!
  subProductTypes: [ProductType!]! @derivedFrom(field: "parentProductType")
  products: [Product!]! @derivedFrom(field: "productType")

  # Hierarchy relationships
  ancestors: [ProductTypeHierarchy!]! @derivedFrom(field: "descendant")
  descendants: [ProductTypeHierarchy!]! @derivedFrom(field: "ancestor")
}

type ProductTypeHierarchy @entity {
  id: ID! # Set as ${slicerId}-${ancestor.id}-${descendant.id}
  slicer: Slicer!
  ancestor: ProductType!
  descendant: ProductType!
  depth: BigInt!
}

type PayeeSlicer @entity {
  id: ID!
  payee: Payee!
  slicer: Slicer!
  slices: BigInt!
  transfersAllowedWhileLocked: Boolean!
  currencyPayments: [PayeeSlicerCurrency!]! @derivedFrom(field: "payeeSlicer")
  purchases: [ProductPurchase!]! @derivedFrom(field: "buyerSlicer")
}

type PayeeCurrency @entity {
  id: ID!
  payee: Payee!
  currency: Currency!
  toWithdraw: BigInt!
  # toWithdrawUsd: BigInt!
  toPayToProtocol: BigInt!
  # toPayToProtocolUsd: BigInt!
  withdrawn: BigInt!
  # withdrawnUsd: BigInt!
  paidToProtocol: BigInt!
  # paidToProtocolUsd: BigInt!
  totalCreatorFees: BigInt!
  totalReferralFees: BigInt!
  slicerPayments: [PayeeSlicerCurrency!]! @derivedFrom(field: "payeeCurrency")
}

type CurrencySlicer @entity {
  id: ID!
  currency: Currency!
  slicer: Slicer!
  released: BigInt!
  releasedUsd: BigInt!
  releasedToProtocol: BigInt!
  # releasedToProtocolUsd: BigInt!
  creatorFeePaid: BigInt!
  # creatorFeePaidUsd: BigInt!

  totalEarned: BigInt!
  totalEarnedByDay: [CurrencySlicerDay!]! @derivedFrom(field: "currencySlicer")
  totalEarnedByWeek: [CurrencySlicerWeek!]!
    @derivedFrom(field: "currencySlicer")
  totalEarnedByMonth: [CurrencySlicerMonth!]!
    @derivedFrom(field: "currencySlicer")
  totalEarnedByYear: [CurrencySlicerYear!]!
    @derivedFrom(field: "currencySlicer")

  releaseEvents: [ReleaseEvent!]! @derivedFrom(field: "currencySlicer")
  payeePayments: [PayeeSlicerCurrency!]! @derivedFrom(field: "currencySlicer")
  purchases: [ProductPurchase!]! @derivedFrom(field: "currencySlicer")
}

type ReleaseEvent @entity {
  id: ID!
  slicer: Slicer!
  currency: Currency!
  payee: Payee!
  currencySlicer: CurrencySlicer!
  amountReleased: BigInt!
  amountReleasedUsd: BigInt!
  timestamp: BigInt!
}

type PayeeSlicerCurrency @entity {
  id: ID!
  payeeSlicer: PayeeSlicer!
  payeeCurrency: PayeeCurrency!
  currencySlicer: CurrencySlicer!
  paidForProducts: BigInt!
}

type ProductPrices @entity {
  id: ID!
  product: Product!
  currency: Currency!
  price: BigInt!
  dynamicPricing: Boolean!
  externalAddress: Bytes!
}

type ProductPurchase @entity {
  id: ID!
  product: Product!
  buyerSlicer: PayeeSlicer!
  currencySlicer: CurrencySlicer!
  buyer: Payee!
  totalPaymentEth: BigInt!
  totalPaymentCurrency: BigInt!
  totalPaymentUsd: BigInt!
  lastPurchasedAtTimestamp: BigInt!
  totalQuantity: BigInt!
  totalPurchases: BigInt!
  purchaseData: [PurchaseData!]! @derivedFrom(field: "productPurchase")
}

type PurchaseData @entity {
  id: ID!
  slicer: Slicer!
  product: Product!
  productCategory: ProductCategory
  parentSlicer: Slicer
  parentProduct: Product
  productPurchase: ProductPurchase!
  slicerOrder: SlicerOrder!
  order: Order!
  quantity: BigInt!
  paymentEth: BigInt!
  paymentCurrency: BigInt!
  paymentUsd: BigInt!
  externalPaymentEth: BigInt!
  externalPaymentCurrency: BigInt!
  externalPaymentUsd: BigInt!
  referralEth: BigInt!
  referralCurrency: BigInt!
  referralUsd: BigInt!
  startPurchaseId: BigInt!
  timestamp: BigInt! # TODO: Replace with order on frontend before deprecating
  transactionHash: Bytes! # TODO: Replace with order on frontend before deprecating
}

type Order @entity {
  id: ID! # transactionHash
  timestamp: BigInt!
  payer: Payee!
  buyer: Payee!
  referrer: Payee!
  slicerOrders: [SlicerOrder!]! @derivedFrom(field: "order")
  extraCosts: [ExtraCost!]! @derivedFrom(field: "order")
  purchaseData: [PurchaseData!]! @derivedFrom(field: "order")
}

type SlicerOrder @entity {
  id: ID!
  timestamp: BigInt!
  totalAmountCurrencies: [SlicerOrderTotalAmountCurrency!]!
    @derivedFrom(field: "slicerOrder")
  totalAmountUsd: BigInt!
  slicer: Slicer!
  order: Order!
  purchaseData: [PurchaseData!]! @derivedFrom(field: "slicerOrder")
  extraCosts: [ExtraCost!]! @derivedFrom(field: "slicerOrder")
}

type SlicerOrderTotalAmountCurrency @entity {
  id: ID!
  slicerOrder: SlicerOrder!
  currency: Currency!
  totalAmount: BigInt!
}

type ExtraCost @entity {
  id: ID!
  slicer: Slicer
  order: Order!
  slicerOrder: SlicerOrder
  recipient: Bytes!
  currency: Currency!
  amount: BigInt!
  amountUsd: BigInt!
  description: String!
}

# type TokenReceived @entity {
#   id: ID!
#   slicer: Slicer!
#   contract: Bytes!
#   tokenId: BigInt!
#   quantity: BigInt!
#   isERC721: Boolean!
#   lastReceivedAtTimestamp: BigInt!
# }

type TokenListing @entity {
  id: ID!
  slicer: Slicer!
  contract: Bytes!
  tokenId: BigInt!
  isERC721: Boolean!
  quantity: BigInt!
  lastEditedAtTimestamp: BigInt!
}
