// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Slicer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Slicer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Slicer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Slicer", id.toString(), this);
    }
  }

  static load(id: string): Slicer | null {
    return changetype<Slicer | null>(store.get("Slicer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicerVersion(): BigInt {
    let value = this.get("slicerVersion");
    return value!.toBigInt();
  }

  set slicerVersion(value: BigInt) {
    this.set("slicerVersion", Value.fromBigInt(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get slices(): BigInt {
    let value = this.get("slices");
    return value!.toBigInt();
  }

  set slices(value: BigInt) {
    this.set("slices", Value.fromBigInt(value));
  }

  get minimumSlices(): BigInt {
    let value = this.get("minimumSlices");
    return value!.toBigInt();
  }

  set minimumSlices(value: BigInt) {
    this.set("minimumSlices", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get releaseTimelock(): BigInt {
    let value = this.get("releaseTimelock");
    return value!.toBigInt();
  }

  set releaseTimelock(value: BigInt) {
    this.set("releaseTimelock", Value.fromBigInt(value));
  }

  get transferableTimelock(): BigInt {
    let value = this.get("transferableTimelock");
    return value!.toBigInt();
  }

  set transferableTimelock(value: BigInt) {
    this.set("transferableTimelock", Value.fromBigInt(value));
  }

  get isImmutable(): boolean {
    let value = this.get("isImmutable");
    return value!.toBoolean();
  }

  set isImmutable(value: boolean) {
    this.set("isImmutable", Value.fromBoolean(value));
  }

  get currenciesControlled(): boolean {
    let value = this.get("currenciesControlled");
    return value!.toBoolean();
  }

  set currenciesControlled(value: boolean) {
    this.set("currenciesControlled", Value.fromBoolean(value));
  }

  get productsControlled(): boolean {
    let value = this.get("productsControlled");
    return value!.toBoolean();
  }

  set productsControlled(value: boolean) {
    this.set("productsControlled", Value.fromBoolean(value));
  }

  get resliceAllowed(): boolean {
    let value = this.get("resliceAllowed");
    return value!.toBoolean();
  }

  set resliceAllowed(value: boolean) {
    this.set("resliceAllowed", Value.fromBoolean(value));
  }

  get transferWhileControlledAllowed(): boolean {
    let value = this.get("transferWhileControlledAllowed");
    return value!.toBoolean();
  }

  set transferWhileControlledAllowed(value: boolean) {
    this.set("transferWhileControlledAllowed", Value.fromBoolean(value));
  }

  get acceptsAllCurrencies(): boolean {
    let value = this.get("acceptsAllCurrencies");
    return value!.toBoolean();
  }

  set acceptsAllCurrencies(value: boolean) {
    this.set("acceptsAllCurrencies", Value.fromBoolean(value));
  }

  get storeClosed(): boolean {
    let value = this.get("storeClosed");
    return value!.toBoolean();
  }

  set storeClosed(value: boolean) {
    this.set("storeClosed", Value.fromBoolean(value));
  }

  get protocolFee(): BigInt {
    let value = this.get("protocolFee");
    return value!.toBigInt();
  }

  set protocolFee(value: BigInt) {
    this.set("protocolFee", Value.fromBigInt(value));
  }

  get royaltyPercentage(): BigInt {
    let value = this.get("royaltyPercentage");
    return value!.toBigInt();
  }

  set royaltyPercentage(value: BigInt) {
    this.set("royaltyPercentage", Value.fromBigInt(value));
  }

  get royaltyReceiver(): string {
    let value = this.get("royaltyReceiver");
    return value!.toString();
  }

  set royaltyReceiver(value: string) {
    this.set("royaltyReceiver", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get controller(): string {
    let value = this.get("controller");
    return value!.toString();
  }

  set controller(value: string) {
    this.set("controller", Value.fromString(value));
  }

  get productsModuleBalance(): BigInt {
    let value = this.get("productsModuleBalance");
    return value!.toBigInt();
  }

  set productsModuleBalance(value: BigInt) {
    this.set("productsModuleBalance", Value.fromBigInt(value));
  }

  get productsModuleReleased(): BigInt {
    let value = this.get("productsModuleReleased");
    return value!.toBigInt();
  }

  set productsModuleReleased(value: BigInt) {
    this.set("productsModuleReleased", Value.fromBigInt(value));
  }

  get referralFeeStore(): BigInt {
    let value = this.get("referralFeeStore");
    return value!.toBigInt();
  }

  set referralFeeStore(value: BigInt) {
    this.set("referralFeeStore", Value.fromBigInt(value));
  }

  get totalOrders(): BigInt {
    let value = this.get("totalOrders");
    return value!.toBigInt();
  }

  set totalOrders(value: BigInt) {
    this.set("totalOrders", Value.fromBigInt(value));
  }

  get totalProductsPurchased(): BigInt {
    let value = this.get("totalProductsPurchased");
    return value!.toBigInt();
  }

  set totalProductsPurchased(value: BigInt) {
    this.set("totalProductsPurchased", Value.fromBigInt(value));
  }

  get totalEarnedUsd(): BigInt {
    let value = this.get("totalEarnedUsd");
    return value!.toBigInt();
  }

  set totalEarnedUsd(value: BigInt) {
    this.set("totalEarnedUsd", Value.fromBigInt(value));
  }

  get releasedUsd(): BigInt {
    let value = this.get("releasedUsd");
    return value!.toBigInt();
  }

  set releasedUsd(value: BigInt) {
    this.set("releasedUsd", Value.fromBigInt(value));
  }

  get statsByDay(): Array<string> {
    let value = this.get("statsByDay");
    return value!.toStringArray();
  }

  set statsByDay(value: Array<string>) {
    this.set("statsByDay", Value.fromStringArray(value));
  }

  get statsByWeek(): Array<string> {
    let value = this.get("statsByWeek");
    return value!.toStringArray();
  }

  set statsByWeek(value: Array<string>) {
    this.set("statsByWeek", Value.fromStringArray(value));
  }

  get statsByMonth(): Array<string> {
    let value = this.get("statsByMonth");
    return value!.toStringArray();
  }

  set statsByMonth(value: Array<string>) {
    this.set("statsByMonth", Value.fromStringArray(value));
  }

  get statsByYear(): Array<string> {
    let value = this.get("statsByYear");
    return value!.toStringArray();
  }

  set statsByYear(value: Array<string>) {
    this.set("statsByYear", Value.fromStringArray(value));
  }

  get childrenSlicers(): Array<string> {
    let value = this.get("childrenSlicers");
    return value!.toStringArray();
  }

  set childrenSlicers(value: Array<string>) {
    this.set("childrenSlicers", Value.fromStringArray(value));
  }

  get currencies(): Array<string> {
    let value = this.get("currencies");
    return value!.toStringArray();
  }

  set currencies(value: Array<string>) {
    this.set("currencies", Value.fromStringArray(value));
  }

  get payees(): Array<string> {
    let value = this.get("payees");
    return value!.toStringArray();
  }

  set payees(value: Array<string>) {
    this.set("payees", Value.fromStringArray(value));
  }

  get products(): Array<string> {
    let value = this.get("products");
    return value!.toStringArray();
  }

  set products(value: Array<string>) {
    this.set("products", Value.fromStringArray(value));
  }

  get TokenListings(): Array<string> {
    let value = this.get("TokenListings");
    return value!.toStringArray();
  }

  set TokenListings(value: Array<string>) {
    this.set("TokenListings", Value.fromStringArray(value));
  }

  get purchaseData(): Array<string> {
    let value = this.get("purchaseData");
    return value!.toStringArray();
  }

  set purchaseData(value: Array<string>) {
    this.set("purchaseData", Value.fromStringArray(value));
  }

  get slicerOrders(): Array<string> {
    let value = this.get("slicerOrders");
    return value!.toStringArray();
  }

  set slicerOrders(value: Array<string>) {
    this.set("slicerOrders", Value.fromStringArray(value));
  }
}

export class SlicerAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SlicerAddress entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SlicerAddress must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SlicerAddress", id.toString(), this);
    }
  }

  static load(id: string): SlicerAddress | null {
    return changetype<SlicerAddress | null>(store.get("SlicerAddress", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }
}

export class SlicerStatsByDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SlicerStatsByDay entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SlicerStatsByDay must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SlicerStatsByDay", id.toString(), this);
    }
  }

  static load(id: string): SlicerStatsByDay | null {
    return changetype<SlicerStatsByDay | null>(
      store.get("SlicerStatsByDay", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    return value!.toBigInt();
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get week(): string {
    let value = this.get("week");
    return value!.toString();
  }

  set week(value: string) {
    this.set("week", Value.fromString(value));
  }

  get month(): string {
    let value = this.get("month");
    return value!.toString();
  }

  set month(value: string) {
    this.set("month", Value.fromString(value));
  }

  get year(): string {
    let value = this.get("year");
    return value!.toString();
  }

  set year(value: string) {
    this.set("year", Value.fromString(value));
  }

  get totalOrders(): BigInt {
    let value = this.get("totalOrders");
    return value!.toBigInt();
  }

  set totalOrders(value: BigInt) {
    this.set("totalOrders", Value.fromBigInt(value));
  }

  get totalProductsPurchased(): BigInt {
    let value = this.get("totalProductsPurchased");
    return value!.toBigInt();
  }

  set totalProductsPurchased(value: BigInt) {
    this.set("totalProductsPurchased", Value.fromBigInt(value));
  }

  get totalEarnedUsd(): BigInt {
    let value = this.get("totalEarnedUsd");
    return value!.toBigInt();
  }

  set totalEarnedUsd(value: BigInt) {
    this.set("totalEarnedUsd", Value.fromBigInt(value));
  }

  get totalEarnedByCurrency(): Array<string> {
    let value = this.get("totalEarnedByCurrency");
    return value!.toStringArray();
  }

  set totalEarnedByCurrency(value: Array<string>) {
    this.set("totalEarnedByCurrency", Value.fromStringArray(value));
  }
}

export class SlicerStatsByWeek extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SlicerStatsByWeek entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SlicerStatsByWeek must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SlicerStatsByWeek", id.toString(), this);
    }
  }

  static load(id: string): SlicerStatsByWeek | null {
    return changetype<SlicerStatsByWeek | null>(
      store.get("SlicerStatsByWeek", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get days(): Array<string> {
    let value = this.get("days");
    return value!.toStringArray();
  }

  set days(value: Array<string>) {
    this.set("days", Value.fromStringArray(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    return value!.toBigInt();
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get month(): string {
    let value = this.get("month");
    return value!.toString();
  }

  set month(value: string) {
    this.set("month", Value.fromString(value));
  }

  get year(): string {
    let value = this.get("year");
    return value!.toString();
  }

  set year(value: string) {
    this.set("year", Value.fromString(value));
  }

  get totalOrders(): BigInt {
    let value = this.get("totalOrders");
    return value!.toBigInt();
  }

  set totalOrders(value: BigInt) {
    this.set("totalOrders", Value.fromBigInt(value));
  }

  get totalProductsPurchased(): BigInt {
    let value = this.get("totalProductsPurchased");
    return value!.toBigInt();
  }

  set totalProductsPurchased(value: BigInt) {
    this.set("totalProductsPurchased", Value.fromBigInt(value));
  }

  get totalEarnedUsd(): BigInt {
    let value = this.get("totalEarnedUsd");
    return value!.toBigInt();
  }

  set totalEarnedUsd(value: BigInt) {
    this.set("totalEarnedUsd", Value.fromBigInt(value));
  }

  get totalEarnedByCurrency(): Array<string> {
    let value = this.get("totalEarnedByCurrency");
    return value!.toStringArray();
  }

  set totalEarnedByCurrency(value: Array<string>) {
    this.set("totalEarnedByCurrency", Value.fromStringArray(value));
  }
}

export class SlicerStatsByMonth extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SlicerStatsByMonth entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SlicerStatsByMonth must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SlicerStatsByMonth", id.toString(), this);
    }
  }

  static load(id: string): SlicerStatsByMonth | null {
    return changetype<SlicerStatsByMonth | null>(
      store.get("SlicerStatsByMonth", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get days(): Array<string> {
    let value = this.get("days");
    return value!.toStringArray();
  }

  set days(value: Array<string>) {
    this.set("days", Value.fromStringArray(value));
  }

  get weeks(): Array<string> {
    let value = this.get("weeks");
    return value!.toStringArray();
  }

  set weeks(value: Array<string>) {
    this.set("weeks", Value.fromStringArray(value));
  }

  get month(): BigInt {
    let value = this.get("month");
    return value!.toBigInt();
  }

  set month(value: BigInt) {
    this.set("month", Value.fromBigInt(value));
  }

  get year(): string {
    let value = this.get("year");
    return value!.toString();
  }

  set year(value: string) {
    this.set("year", Value.fromString(value));
  }

  get totalOrders(): BigInt {
    let value = this.get("totalOrders");
    return value!.toBigInt();
  }

  set totalOrders(value: BigInt) {
    this.set("totalOrders", Value.fromBigInt(value));
  }

  get totalProductsPurchased(): BigInt {
    let value = this.get("totalProductsPurchased");
    return value!.toBigInt();
  }

  set totalProductsPurchased(value: BigInt) {
    this.set("totalProductsPurchased", Value.fromBigInt(value));
  }

  get totalEarnedUsd(): BigInt {
    let value = this.get("totalEarnedUsd");
    return value!.toBigInt();
  }

  set totalEarnedUsd(value: BigInt) {
    this.set("totalEarnedUsd", Value.fromBigInt(value));
  }

  get totalEarnedByCurrency(): Array<string> {
    let value = this.get("totalEarnedByCurrency");
    return value!.toStringArray();
  }

  set totalEarnedByCurrency(value: Array<string>) {
    this.set("totalEarnedByCurrency", Value.fromStringArray(value));
  }
}

export class SlicerStatsByYear extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SlicerStatsByYear entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SlicerStatsByYear must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SlicerStatsByYear", id.toString(), this);
    }
  }

  static load(id: string): SlicerStatsByYear | null {
    return changetype<SlicerStatsByYear | null>(
      store.get("SlicerStatsByYear", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get days(): Array<string> {
    let value = this.get("days");
    return value!.toStringArray();
  }

  set days(value: Array<string>) {
    this.set("days", Value.fromStringArray(value));
  }

  get weeks(): Array<string> {
    let value = this.get("weeks");
    return value!.toStringArray();
  }

  set weeks(value: Array<string>) {
    this.set("weeks", Value.fromStringArray(value));
  }

  get months(): Array<string> {
    let value = this.get("months");
    return value!.toStringArray();
  }

  set months(value: Array<string>) {
    this.set("months", Value.fromStringArray(value));
  }

  get year(): BigInt {
    let value = this.get("year");
    return value!.toBigInt();
  }

  set year(value: BigInt) {
    this.set("year", Value.fromBigInt(value));
  }

  get totalOrders(): BigInt {
    let value = this.get("totalOrders");
    return value!.toBigInt();
  }

  set totalOrders(value: BigInt) {
    this.set("totalOrders", Value.fromBigInt(value));
  }

  get totalProductsPurchased(): BigInt {
    let value = this.get("totalProductsPurchased");
    return value!.toBigInt();
  }

  set totalProductsPurchased(value: BigInt) {
    this.set("totalProductsPurchased", Value.fromBigInt(value));
  }

  get totalEarnedUsd(): BigInt {
    let value = this.get("totalEarnedUsd");
    return value!.toBigInt();
  }

  set totalEarnedUsd(value: BigInt) {
    this.set("totalEarnedUsd", Value.fromBigInt(value));
  }

  get totalEarnedByCurrency(): Array<string> {
    let value = this.get("totalEarnedByCurrency");
    return value!.toStringArray();
  }

  set totalEarnedByCurrency(value: Array<string>) {
    this.set("totalEarnedByCurrency", Value.fromStringArray(value));
  }
}

export class CurrencySlicerDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CurrencySlicerDay entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CurrencySlicerDay must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CurrencySlicerDay", id.toString(), this);
    }
  }

  static load(id: string): CurrencySlicerDay | null {
    return changetype<CurrencySlicerDay | null>(
      store.get("CurrencySlicerDay", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get currencySlicer(): string {
    let value = this.get("currencySlicer");
    return value!.toString();
  }

  set currencySlicer(value: string) {
    this.set("currencySlicer", Value.fromString(value));
  }

  get slicerDay(): string {
    let value = this.get("slicerDay");
    return value!.toString();
  }

  set slicerDay(value: string) {
    this.set("slicerDay", Value.fromString(value));
  }

  get totalEarned(): BigInt {
    let value = this.get("totalEarned");
    return value!.toBigInt();
  }

  set totalEarned(value: BigInt) {
    this.set("totalEarned", Value.fromBigInt(value));
  }
}

export class CurrencySlicerWeek extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CurrencySlicerWeek entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CurrencySlicerWeek must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CurrencySlicerWeek", id.toString(), this);
    }
  }

  static load(id: string): CurrencySlicerWeek | null {
    return changetype<CurrencySlicerWeek | null>(
      store.get("CurrencySlicerWeek", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get currencySlicer(): string {
    let value = this.get("currencySlicer");
    return value!.toString();
  }

  set currencySlicer(value: string) {
    this.set("currencySlicer", Value.fromString(value));
  }

  get slicerWeek(): string {
    let value = this.get("slicerWeek");
    return value!.toString();
  }

  set slicerWeek(value: string) {
    this.set("slicerWeek", Value.fromString(value));
  }

  get totalEarned(): BigInt {
    let value = this.get("totalEarned");
    return value!.toBigInt();
  }

  set totalEarned(value: BigInt) {
    this.set("totalEarned", Value.fromBigInt(value));
  }
}

export class CurrencySlicerMonth extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CurrencySlicerMonth entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CurrencySlicerMonth must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CurrencySlicerMonth", id.toString(), this);
    }
  }

  static load(id: string): CurrencySlicerMonth | null {
    return changetype<CurrencySlicerMonth | null>(
      store.get("CurrencySlicerMonth", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get currencySlicer(): string {
    let value = this.get("currencySlicer");
    return value!.toString();
  }

  set currencySlicer(value: string) {
    this.set("currencySlicer", Value.fromString(value));
  }

  get slicerMonth(): string {
    let value = this.get("slicerMonth");
    return value!.toString();
  }

  set slicerMonth(value: string) {
    this.set("slicerMonth", Value.fromString(value));
  }

  get totalEarned(): BigInt {
    let value = this.get("totalEarned");
    return value!.toBigInt();
  }

  set totalEarned(value: BigInt) {
    this.set("totalEarned", Value.fromBigInt(value));
  }
}

export class CurrencySlicerYear extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CurrencySlicerYear entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CurrencySlicerYear must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CurrencySlicerYear", id.toString(), this);
    }
  }

  static load(id: string): CurrencySlicerYear | null {
    return changetype<CurrencySlicerYear | null>(
      store.get("CurrencySlicerYear", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get currencySlicer(): string {
    let value = this.get("currencySlicer");
    return value!.toString();
  }

  set currencySlicer(value: string) {
    this.set("currencySlicer", Value.fromString(value));
  }

  get slicerYear(): string {
    let value = this.get("slicerYear");
    return value!.toString();
  }

  set slicerYear(value: string) {
    this.set("slicerYear", Value.fromString(value));
  }

  get totalEarned(): BigInt {
    let value = this.get("totalEarned");
    return value!.toBigInt();
  }

  set totalEarned(value: BigInt) {
    this.set("totalEarned", Value.fromBigInt(value));
  }
}

export class Payee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Payee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Payee must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Payee", id.toString(), this);
    }
  }

  static load(id: string): Payee | null {
    return changetype<Payee | null>(store.get("Payee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get created(): Array<string> {
    let value = this.get("created");
    return value!.toStringArray();
  }

  set created(value: Array<string>) {
    this.set("created", Value.fromStringArray(value));
  }

  get controlled(): Array<string> {
    let value = this.get("controlled");
    return value!.toStringArray();
  }

  set controlled(value: Array<string>) {
    this.set("controlled", Value.fromStringArray(value));
  }

  get royaltyReceived(): Array<string> {
    let value = this.get("royaltyReceived");
    return value!.toStringArray();
  }

  set royaltyReceived(value: Array<string>) {
    this.set("royaltyReceived", Value.fromStringArray(value));
  }

  get slicers(): Array<string> {
    let value = this.get("slicers");
    return value!.toStringArray();
  }

  set slicers(value: Array<string>) {
    this.set("slicers", Value.fromStringArray(value));
  }

  get currencies(): Array<string> {
    let value = this.get("currencies");
    return value!.toStringArray();
  }

  set currencies(value: Array<string>) {
    this.set("currencies", Value.fromStringArray(value));
  }

  get purchases(): Array<string> {
    let value = this.get("purchases");
    return value!.toStringArray();
  }

  set purchases(value: Array<string>) {
    this.set("purchases", Value.fromStringArray(value));
  }

  get orders(): Array<string> {
    let value = this.get("orders");
    return value!.toStringArray();
  }

  set orders(value: Array<string>) {
    this.set("orders", Value.fromStringArray(value));
  }

  get referrals(): Array<string> {
    let value = this.get("referrals");
    return value!.toStringArray();
  }

  set referrals(value: Array<string>) {
    this.set("referrals", Value.fromStringArray(value));
  }
}

export class Currency extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Currency entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Currency must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Currency", id.toString(), this);
    }
  }

  static load(id: string): Currency | null {
    return changetype<Currency | null>(store.get("Currency", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicers(): Array<string> {
    let value = this.get("slicers");
    return value!.toStringArray();
  }

  set slicers(value: Array<string>) {
    this.set("slicers", Value.fromStringArray(value));
  }

  get payees(): Array<string> {
    let value = this.get("payees");
    return value!.toStringArray();
  }

  set payees(value: Array<string>) {
    this.set("payees", Value.fromStringArray(value));
  }

  get products(): Array<string> {
    let value = this.get("products");
    return value!.toStringArray();
  }

  set products(value: Array<string>) {
    this.set("products", Value.fromStringArray(value));
  }
}

export class Product extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Product entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Product must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Product", id.toString(), this);
    }
  }

  static load(id: string): Product | null {
    return changetype<Product | null>(store.get("Product", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get categoryIndex(): BigInt {
    let value = this.get("categoryIndex");
    return value!.toBigInt();
  }

  set categoryIndex(value: BigInt) {
    this.set("categoryIndex", Value.fromBigInt(value));
  }

  get isRemoved(): boolean {
    let value = this.get("isRemoved");
    return value!.toBoolean();
  }

  set isRemoved(value: boolean) {
    this.set("isRemoved", Value.fromBoolean(value));
  }

  get isFree(): boolean {
    let value = this.get("isFree");
    return value!.toBoolean();
  }

  set isFree(value: boolean) {
    this.set("isFree", Value.fromBoolean(value));
  }

  get isInfinite(): boolean {
    let value = this.get("isInfinite");
    return value!.toBoolean();
  }

  set isInfinite(value: boolean) {
    this.set("isInfinite", Value.fromBoolean(value));
  }

  get availableUnits(): BigInt {
    let value = this.get("availableUnits");
    return value!.toBigInt();
  }

  set availableUnits(value: BigInt) {
    this.set("availableUnits", Value.fromBigInt(value));
  }

  get maxUnitsPerBuyer(): BigInt {
    let value = this.get("maxUnitsPerBuyer");
    return value!.toBigInt();
  }

  set maxUnitsPerBuyer(value: BigInt) {
    this.set("maxUnitsPerBuyer", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get extAddress(): Bytes {
    let value = this.get("extAddress");
    return value!.toBytes();
  }

  set extAddress(value: Bytes) {
    this.set("extAddress", Value.fromBytes(value));
  }

  get extValue(): BigInt {
    let value = this.get("extValue");
    return value!.toBigInt();
  }

  set extValue(value: BigInt) {
    this.set("extValue", Value.fromBigInt(value));
  }

  get extCheckSig(): Bytes {
    let value = this.get("extCheckSig");
    return value!.toBytes();
  }

  set extCheckSig(value: Bytes) {
    this.set("extCheckSig", Value.fromBytes(value));
  }

  get extExecSig(): Bytes {
    let value = this.get("extExecSig");
    return value!.toBytes();
  }

  set extExecSig(value: Bytes) {
    this.set("extExecSig", Value.fromBytes(value));
  }

  get extData(): Bytes {
    let value = this.get("extData");
    return value!.toBytes();
  }

  set extData(value: Bytes) {
    this.set("extData", Value.fromBytes(value));
  }

  get extRelativePrice(): boolean {
    let value = this.get("extRelativePrice");
    return value!.toBoolean();
  }

  set extRelativePrice(value: boolean) {
    this.set("extRelativePrice", Value.fromBoolean(value));
  }

  get extPreferredToken(): boolean {
    let value = this.get("extPreferredToken");
    return value!.toBoolean();
  }

  set extPreferredToken(value: boolean) {
    this.set("extPreferredToken", Value.fromBoolean(value));
  }

  get totalPurchases(): BigInt {
    let value = this.get("totalPurchases");
    return value!.toBigInt();
  }

  set totalPurchases(value: BigInt) {
    this.set("totalPurchases", Value.fromBigInt(value));
  }

  get referralFeeProduct(): BigInt {
    let value = this.get("referralFeeProduct");
    return value!.toBigInt();
  }

  set referralFeeProduct(value: BigInt) {
    this.set("referralFeeProduct", Value.fromBigInt(value));
  }

  get subProducts(): Array<string> {
    let value = this.get("subProducts");
    return value!.toStringArray();
  }

  set subProducts(value: Array<string>) {
    this.set("subProducts", Value.fromStringArray(value));
  }

  get prices(): Array<string> {
    let value = this.get("prices");
    return value!.toStringArray();
  }

  set prices(value: Array<string>) {
    this.set("prices", Value.fromStringArray(value));
  }

  get purchases(): Array<string> {
    let value = this.get("purchases");
    return value!.toStringArray();
  }

  set purchases(value: Array<string>) {
    this.set("purchases", Value.fromStringArray(value));
  }

  get purchaseData(): Array<string> {
    let value = this.get("purchaseData");
    return value!.toStringArray();
  }

  set purchaseData(value: Array<string>) {
    this.set("purchaseData", Value.fromStringArray(value));
  }
}

export class PayeeSlicer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PayeeSlicer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PayeeSlicer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PayeeSlicer", id.toString(), this);
    }
  }

  static load(id: string): PayeeSlicer | null {
    return changetype<PayeeSlicer | null>(store.get("PayeeSlicer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payee(): string {
    let value = this.get("payee");
    return value!.toString();
  }

  set payee(value: string) {
    this.set("payee", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get slices(): BigInt {
    let value = this.get("slices");
    return value!.toBigInt();
  }

  set slices(value: BigInt) {
    this.set("slices", Value.fromBigInt(value));
  }

  get transfersAllowedWhileLocked(): boolean {
    let value = this.get("transfersAllowedWhileLocked");
    return value!.toBoolean();
  }

  set transfersAllowedWhileLocked(value: boolean) {
    this.set("transfersAllowedWhileLocked", Value.fromBoolean(value));
  }

  get currencyPayments(): Array<string> {
    let value = this.get("currencyPayments");
    return value!.toStringArray();
  }

  set currencyPayments(value: Array<string>) {
    this.set("currencyPayments", Value.fromStringArray(value));
  }

  get purchases(): Array<string> {
    let value = this.get("purchases");
    return value!.toStringArray();
  }

  set purchases(value: Array<string>) {
    this.set("purchases", Value.fromStringArray(value));
  }
}

export class PayeeCurrency extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PayeeCurrency entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PayeeCurrency must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PayeeCurrency", id.toString(), this);
    }
  }

  static load(id: string): PayeeCurrency | null {
    return changetype<PayeeCurrency | null>(store.get("PayeeCurrency", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payee(): string {
    let value = this.get("payee");
    return value!.toString();
  }

  set payee(value: string) {
    this.set("payee", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get toWithdraw(): BigInt {
    let value = this.get("toWithdraw");
    return value!.toBigInt();
  }

  set toWithdraw(value: BigInt) {
    this.set("toWithdraw", Value.fromBigInt(value));
  }

  get toPayToProtocol(): BigInt {
    let value = this.get("toPayToProtocol");
    return value!.toBigInt();
  }

  set toPayToProtocol(value: BigInt) {
    this.set("toPayToProtocol", Value.fromBigInt(value));
  }

  get withdrawn(): BigInt {
    let value = this.get("withdrawn");
    return value!.toBigInt();
  }

  set withdrawn(value: BigInt) {
    this.set("withdrawn", Value.fromBigInt(value));
  }

  get paidToProtocol(): BigInt {
    let value = this.get("paidToProtocol");
    return value!.toBigInt();
  }

  set paidToProtocol(value: BigInt) {
    this.set("paidToProtocol", Value.fromBigInt(value));
  }

  get totalCreatorFees(): BigInt {
    let value = this.get("totalCreatorFees");
    return value!.toBigInt();
  }

  set totalCreatorFees(value: BigInt) {
    this.set("totalCreatorFees", Value.fromBigInt(value));
  }

  get totalReferralFees(): BigInt {
    let value = this.get("totalReferralFees");
    return value!.toBigInt();
  }

  set totalReferralFees(value: BigInt) {
    this.set("totalReferralFees", Value.fromBigInt(value));
  }

  get slicerPayments(): Array<string> {
    let value = this.get("slicerPayments");
    return value!.toStringArray();
  }

  set slicerPayments(value: Array<string>) {
    this.set("slicerPayments", Value.fromStringArray(value));
  }
}

export class CurrencySlicer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CurrencySlicer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CurrencySlicer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CurrencySlicer", id.toString(), this);
    }
  }

  static load(id: string): CurrencySlicer | null {
    return changetype<CurrencySlicer | null>(store.get("CurrencySlicer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get released(): BigInt {
    let value = this.get("released");
    return value!.toBigInt();
  }

  set released(value: BigInt) {
    this.set("released", Value.fromBigInt(value));
  }

  get releasedUsd(): BigInt {
    let value = this.get("releasedUsd");
    return value!.toBigInt();
  }

  set releasedUsd(value: BigInt) {
    this.set("releasedUsd", Value.fromBigInt(value));
  }

  get releasedToProtocol(): BigInt {
    let value = this.get("releasedToProtocol");
    return value!.toBigInt();
  }

  set releasedToProtocol(value: BigInt) {
    this.set("releasedToProtocol", Value.fromBigInt(value));
  }

  get creatorFeePaid(): BigInt {
    let value = this.get("creatorFeePaid");
    return value!.toBigInt();
  }

  set creatorFeePaid(value: BigInt) {
    this.set("creatorFeePaid", Value.fromBigInt(value));
  }

  get totalEarned(): BigInt {
    let value = this.get("totalEarned");
    return value!.toBigInt();
  }

  set totalEarned(value: BigInt) {
    this.set("totalEarned", Value.fromBigInt(value));
  }

  get totalEarnedByDay(): Array<string> {
    let value = this.get("totalEarnedByDay");
    return value!.toStringArray();
  }

  set totalEarnedByDay(value: Array<string>) {
    this.set("totalEarnedByDay", Value.fromStringArray(value));
  }

  get totalEarnedByWeek(): Array<string> {
    let value = this.get("totalEarnedByWeek");
    return value!.toStringArray();
  }

  set totalEarnedByWeek(value: Array<string>) {
    this.set("totalEarnedByWeek", Value.fromStringArray(value));
  }

  get totalEarnedByMonth(): Array<string> {
    let value = this.get("totalEarnedByMonth");
    return value!.toStringArray();
  }

  set totalEarnedByMonth(value: Array<string>) {
    this.set("totalEarnedByMonth", Value.fromStringArray(value));
  }

  get totalEarnedByYear(): Array<string> {
    let value = this.get("totalEarnedByYear");
    return value!.toStringArray();
  }

  set totalEarnedByYear(value: Array<string>) {
    this.set("totalEarnedByYear", Value.fromStringArray(value));
  }

  get releaseEvents(): Array<string> {
    let value = this.get("releaseEvents");
    return value!.toStringArray();
  }

  set releaseEvents(value: Array<string>) {
    this.set("releaseEvents", Value.fromStringArray(value));
  }

  get payeePayments(): Array<string> {
    let value = this.get("payeePayments");
    return value!.toStringArray();
  }

  set payeePayments(value: Array<string>) {
    this.set("payeePayments", Value.fromStringArray(value));
  }

  get purchases(): Array<string> {
    let value = this.get("purchases");
    return value!.toStringArray();
  }

  set purchases(value: Array<string>) {
    this.set("purchases", Value.fromStringArray(value));
  }
}

export class ReleaseEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReleaseEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReleaseEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReleaseEvent", id.toString(), this);
    }
  }

  static load(id: string): ReleaseEvent | null {
    return changetype<ReleaseEvent | null>(store.get("ReleaseEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get payee(): string {
    let value = this.get("payee");
    return value!.toString();
  }

  set payee(value: string) {
    this.set("payee", Value.fromString(value));
  }

  get currencySlicer(): string {
    let value = this.get("currencySlicer");
    return value!.toString();
  }

  set currencySlicer(value: string) {
    this.set("currencySlicer", Value.fromString(value));
  }

  get amountReleased(): BigInt {
    let value = this.get("amountReleased");
    return value!.toBigInt();
  }

  set amountReleased(value: BigInt) {
    this.set("amountReleased", Value.fromBigInt(value));
  }

  get amountReleasedUsd(): BigInt {
    let value = this.get("amountReleasedUsd");
    return value!.toBigInt();
  }

  set amountReleasedUsd(value: BigInt) {
    this.set("amountReleasedUsd", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PayeeSlicerCurrency extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PayeeSlicerCurrency entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PayeeSlicerCurrency must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PayeeSlicerCurrency", id.toString(), this);
    }
  }

  static load(id: string): PayeeSlicerCurrency | null {
    return changetype<PayeeSlicerCurrency | null>(
      store.get("PayeeSlicerCurrency", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payeeSlicer(): string {
    let value = this.get("payeeSlicer");
    return value!.toString();
  }

  set payeeSlicer(value: string) {
    this.set("payeeSlicer", Value.fromString(value));
  }

  get payeeCurrency(): string {
    let value = this.get("payeeCurrency");
    return value!.toString();
  }

  set payeeCurrency(value: string) {
    this.set("payeeCurrency", Value.fromString(value));
  }

  get currencySlicer(): string {
    let value = this.get("currencySlicer");
    return value!.toString();
  }

  set currencySlicer(value: string) {
    this.set("currencySlicer", Value.fromString(value));
  }

  get paidForProducts(): BigInt {
    let value = this.get("paidForProducts");
    return value!.toBigInt();
  }

  set paidForProducts(value: BigInt) {
    this.set("paidForProducts", Value.fromBigInt(value));
  }
}

export class ProductPrices extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProductPrices entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProductPrices must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProductPrices", id.toString(), this);
    }
  }

  static load(id: string): ProductPrices | null {
    return changetype<ProductPrices | null>(store.get("ProductPrices", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get product(): string {
    let value = this.get("product");
    return value!.toString();
  }

  set product(value: string) {
    this.set("product", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get dynamicPricing(): boolean {
    let value = this.get("dynamicPricing");
    return value!.toBoolean();
  }

  set dynamicPricing(value: boolean) {
    this.set("dynamicPricing", Value.fromBoolean(value));
  }

  get externalAddress(): Bytes {
    let value = this.get("externalAddress");
    return value!.toBytes();
  }

  set externalAddress(value: Bytes) {
    this.set("externalAddress", Value.fromBytes(value));
  }
}

export class ProductPurchase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProductPurchase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProductPurchase must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProductPurchase", id.toString(), this);
    }
  }

  static load(id: string): ProductPurchase | null {
    return changetype<ProductPurchase | null>(store.get("ProductPurchase", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get product(): string {
    let value = this.get("product");
    return value!.toString();
  }

  set product(value: string) {
    this.set("product", Value.fromString(value));
  }

  get buyerSlicer(): string {
    let value = this.get("buyerSlicer");
    return value!.toString();
  }

  set buyerSlicer(value: string) {
    this.set("buyerSlicer", Value.fromString(value));
  }

  get currencySlicer(): string {
    let value = this.get("currencySlicer");
    return value!.toString();
  }

  set currencySlicer(value: string) {
    this.set("currencySlicer", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get totalPaymentEth(): BigInt {
    let value = this.get("totalPaymentEth");
    return value!.toBigInt();
  }

  set totalPaymentEth(value: BigInt) {
    this.set("totalPaymentEth", Value.fromBigInt(value));
  }

  get totalPaymentCurrency(): BigInt {
    let value = this.get("totalPaymentCurrency");
    return value!.toBigInt();
  }

  set totalPaymentCurrency(value: BigInt) {
    this.set("totalPaymentCurrency", Value.fromBigInt(value));
  }

  get totalPaymentUsd(): BigInt {
    let value = this.get("totalPaymentUsd");
    return value!.toBigInt();
  }

  set totalPaymentUsd(value: BigInt) {
    this.set("totalPaymentUsd", Value.fromBigInt(value));
  }

  get lastPurchasedAtTimestamp(): BigInt {
    let value = this.get("lastPurchasedAtTimestamp");
    return value!.toBigInt();
  }

  set lastPurchasedAtTimestamp(value: BigInt) {
    this.set("lastPurchasedAtTimestamp", Value.fromBigInt(value));
  }

  get totalQuantity(): BigInt {
    let value = this.get("totalQuantity");
    return value!.toBigInt();
  }

  set totalQuantity(value: BigInt) {
    this.set("totalQuantity", Value.fromBigInt(value));
  }

  get totalPurchases(): BigInt {
    let value = this.get("totalPurchases");
    return value!.toBigInt();
  }

  set totalPurchases(value: BigInt) {
    this.set("totalPurchases", Value.fromBigInt(value));
  }

  get purchaseData(): Array<string> {
    let value = this.get("purchaseData");
    return value!.toStringArray();
  }

  set purchaseData(value: Array<string>) {
    this.set("purchaseData", Value.fromStringArray(value));
  }
}

export class PurchaseData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PurchaseData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PurchaseData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PurchaseData", id.toString(), this);
    }
  }

  static load(id: string): PurchaseData | null {
    return changetype<PurchaseData | null>(store.get("PurchaseData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get product(): string {
    let value = this.get("product");
    return value!.toString();
  }

  set product(value: string) {
    this.set("product", Value.fromString(value));
  }

  get parentSlicer(): string | null {
    let value = this.get("parentSlicer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parentSlicer(value: string | null) {
    if (!value) {
      this.unset("parentSlicer");
    } else {
      this.set("parentSlicer", Value.fromString(<string>value));
    }
  }

  get parentProduct(): string | null {
    let value = this.get("parentProduct");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parentProduct(value: string | null) {
    if (!value) {
      this.unset("parentProduct");
    } else {
      this.set("parentProduct", Value.fromString(<string>value));
    }
  }

  get productPurchase(): string {
    let value = this.get("productPurchase");
    return value!.toString();
  }

  set productPurchase(value: string) {
    this.set("productPurchase", Value.fromString(value));
  }

  get slicerOrder(): string {
    let value = this.get("slicerOrder");
    return value!.toString();
  }

  set slicerOrder(value: string) {
    this.set("slicerOrder", Value.fromString(value));
  }

  get order(): string {
    let value = this.get("order");
    return value!.toString();
  }

  set order(value: string) {
    this.set("order", Value.fromString(value));
  }

  get quantity(): BigInt {
    let value = this.get("quantity");
    return value!.toBigInt();
  }

  set quantity(value: BigInt) {
    this.set("quantity", Value.fromBigInt(value));
  }

  get paymentEth(): BigInt {
    let value = this.get("paymentEth");
    return value!.toBigInt();
  }

  set paymentEth(value: BigInt) {
    this.set("paymentEth", Value.fromBigInt(value));
  }

  get paymentCurrency(): BigInt {
    let value = this.get("paymentCurrency");
    return value!.toBigInt();
  }

  set paymentCurrency(value: BigInt) {
    this.set("paymentCurrency", Value.fromBigInt(value));
  }

  get paymentUsd(): BigInt {
    let value = this.get("paymentUsd");
    return value!.toBigInt();
  }

  set paymentUsd(value: BigInt) {
    this.set("paymentUsd", Value.fromBigInt(value));
  }

  get externalPaymentEth(): BigInt {
    let value = this.get("externalPaymentEth");
    return value!.toBigInt();
  }

  set externalPaymentEth(value: BigInt) {
    this.set("externalPaymentEth", Value.fromBigInt(value));
  }

  get externalPaymentCurrency(): BigInt {
    let value = this.get("externalPaymentCurrency");
    return value!.toBigInt();
  }

  set externalPaymentCurrency(value: BigInt) {
    this.set("externalPaymentCurrency", Value.fromBigInt(value));
  }

  get externalPaymentUsd(): BigInt {
    let value = this.get("externalPaymentUsd");
    return value!.toBigInt();
  }

  set externalPaymentUsd(value: BigInt) {
    this.set("externalPaymentUsd", Value.fromBigInt(value));
  }

  get referralEth(): BigInt {
    let value = this.get("referralEth");
    return value!.toBigInt();
  }

  set referralEth(value: BigInt) {
    this.set("referralEth", Value.fromBigInt(value));
  }

  get referralCurrency(): BigInt {
    let value = this.get("referralCurrency");
    return value!.toBigInt();
  }

  set referralCurrency(value: BigInt) {
    this.set("referralCurrency", Value.fromBigInt(value));
  }

  get referralUsd(): BigInt {
    let value = this.get("referralUsd");
    return value!.toBigInt();
  }

  set referralUsd(value: BigInt) {
    this.set("referralUsd", Value.fromBigInt(value));
  }

  get startPurchaseId(): BigInt {
    let value = this.get("startPurchaseId");
    return value!.toBigInt();
  }

  set startPurchaseId(value: BigInt) {
    this.set("startPurchaseId", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Order must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get payer(): string {
    let value = this.get("payer");
    return value!.toString();
  }

  set payer(value: string) {
    this.set("payer", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get referrer(): string {
    let value = this.get("referrer");
    return value!.toString();
  }

  set referrer(value: string) {
    this.set("referrer", Value.fromString(value));
  }

  get slicerOrders(): Array<string> {
    let value = this.get("slicerOrders");
    return value!.toStringArray();
  }

  set slicerOrders(value: Array<string>) {
    this.set("slicerOrders", Value.fromStringArray(value));
  }

  get extraCosts(): Array<string> {
    let value = this.get("extraCosts");
    return value!.toStringArray();
  }

  set extraCosts(value: Array<string>) {
    this.set("extraCosts", Value.fromStringArray(value));
  }

  get purchaseData(): Array<string> {
    let value = this.get("purchaseData");
    return value!.toStringArray();
  }

  set purchaseData(value: Array<string>) {
    this.set("purchaseData", Value.fromStringArray(value));
  }
}

export class SlicerOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SlicerOrder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SlicerOrder must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SlicerOrder", id.toString(), this);
    }
  }

  static load(id: string): SlicerOrder | null {
    return changetype<SlicerOrder | null>(store.get("SlicerOrder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get totalAmountCurrencies(): Array<string> {
    let value = this.get("totalAmountCurrencies");
    return value!.toStringArray();
  }

  set totalAmountCurrencies(value: Array<string>) {
    this.set("totalAmountCurrencies", Value.fromStringArray(value));
  }

  get totalAmountUsd(): BigInt {
    let value = this.get("totalAmountUsd");
    return value!.toBigInt();
  }

  set totalAmountUsd(value: BigInt) {
    this.set("totalAmountUsd", Value.fromBigInt(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get order(): string {
    let value = this.get("order");
    return value!.toString();
  }

  set order(value: string) {
    this.set("order", Value.fromString(value));
  }

  get purchaseData(): Array<string> {
    let value = this.get("purchaseData");
    return value!.toStringArray();
  }

  set purchaseData(value: Array<string>) {
    this.set("purchaseData", Value.fromStringArray(value));
  }

  get extraCosts(): Array<string> {
    let value = this.get("extraCosts");
    return value!.toStringArray();
  }

  set extraCosts(value: Array<string>) {
    this.set("extraCosts", Value.fromStringArray(value));
  }
}

export class SlicerOrderTotalAmountCurrency extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SlicerOrderTotalAmountCurrency entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SlicerOrderTotalAmountCurrency must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SlicerOrderTotalAmountCurrency", id.toString(), this);
    }
  }

  static load(id: string): SlicerOrderTotalAmountCurrency | null {
    return changetype<SlicerOrderTotalAmountCurrency | null>(
      store.get("SlicerOrderTotalAmountCurrency", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicerOrder(): string {
    let value = this.get("slicerOrder");
    return value!.toString();
  }

  set slicerOrder(value: string) {
    this.set("slicerOrder", Value.fromString(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get totalAmount(): BigInt {
    let value = this.get("totalAmount");
    return value!.toBigInt();
  }

  set totalAmount(value: BigInt) {
    this.set("totalAmount", Value.fromBigInt(value));
  }
}

export class ExtraCost extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExtraCost entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExtraCost must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExtraCost", id.toString(), this);
    }
  }

  static load(id: string): ExtraCost | null {
    return changetype<ExtraCost | null>(store.get("ExtraCost", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string | null {
    let value = this.get("slicer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set slicer(value: string | null) {
    if (!value) {
      this.unset("slicer");
    } else {
      this.set("slicer", Value.fromString(<string>value));
    }
  }

  get order(): string {
    let value = this.get("order");
    return value!.toString();
  }

  set order(value: string) {
    this.set("order", Value.fromString(value));
  }

  get slicerOrder(): string | null {
    let value = this.get("slicerOrder");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set slicerOrder(value: string | null) {
    if (!value) {
      this.unset("slicerOrder");
    } else {
      this.set("slicerOrder", Value.fromString(<string>value));
    }
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get currency(): string {
    let value = this.get("currency");
    return value!.toString();
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get amountUsd(): BigInt {
    let value = this.get("amountUsd");
    return value!.toBigInt();
  }

  set amountUsd(value: BigInt) {
    this.set("amountUsd", Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }
}

export class TokenListing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenListing entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenListing must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenListing", id.toString(), this);
    }
  }

  static load(id: string): TokenListing | null {
    return changetype<TokenListing | null>(store.get("TokenListing", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicer(): string {
    let value = this.get("slicer");
    return value!.toString();
  }

  set slicer(value: string) {
    this.set("slicer", Value.fromString(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value!.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get isERC721(): boolean {
    let value = this.get("isERC721");
    return value!.toBoolean();
  }

  set isERC721(value: boolean) {
    this.set("isERC721", Value.fromBoolean(value));
  }

  get quantity(): BigInt {
    let value = this.get("quantity");
    return value!.toBigInt();
  }

  set quantity(value: BigInt) {
    this.set("quantity", Value.fromBigInt(value));
  }

  get lastEditedAtTimestamp(): BigInt {
    let value = this.get("lastEditedAtTimestamp");
    return value!.toBigInt();
  }

  set lastEditedAtTimestamp(value: BigInt) {
    this.set("lastEditedAtTimestamp", Value.fromBigInt(value));
  }
}
